************************************
* * ****************************** *  
* *                              * *
* *    Java Important Syntax     * *
* *                              * *
* **********************************
************************************


1. Taking Input using BufferedReader

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Solution{

    // Here do not forget to write throws Exception if using BufferedReader
    public static void main(String[] args)throws Exception {

       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        String line = br.readLine();
        int N = Integer.parseInt(line);
        
        //int[] brr = new int[2];
        
        for(int i=0;i<N;i++){

            line = br.readLine();
            
            // Split function for spltting input
            String[] arr = line.split(" ");
            
            int a = Integer.parseInt(arr[0]);
            int b = Integer.parseInt(arr[1]);
            int c = a+b;
            
            System.out.println(c);

        }
    }
}



2. Using StringBuilder

// This shows how StringBUilder Works in java
// StringBuilder Vs StringBUffers (They are use to create mutable string.)

/*
StringBuffer is the thread safe utility class to perform several operations on Strings. 
It contains append() and insert() methods that are widely used to perform operation 
on Strings in a multi-thread environment. Most of its functions are synchronized for thread safety.

Since most of the String operations, for example concatenation happens in a single thread environment, 
Java 1.5 introduced another utility class StringBuilder to perform similar operations but doesn’t provide 
thread safety. All the methods are unsynchronized.

*/


import java.util.*;
import java.io.*;

class Test{

public static void main(String args[]){  


            StringBuilder fin = new StringBuilder();
        
            String fn = "Nitish";
            String ln = "Vashisth";

             /// Using string builder
             StringBuilder bru = new StringBuilder(fn);

             /// Using reverse Method directlty , insead of writing function for same
             bru.reverse();
             
             /// Using append method
             bru.append(" test \n");
             bru.append(ln);
            
            /// Back to string
            String total = bru.toString();

            System.out.println(" Final string is : " + total);

            /// Split other than whitespace

            String s = "hell.tea.kit.ll";

            String[] arr = s.split("\\.");

            for(int i=0;i<arr.length;i++){
                   System.out.println(arr[i]);
            }

 }  
}  

Output :
hsitiN test Vashisth



3. Using Lambda Expressions

import java.util.*;
import java.io.*;

  class Node{
    
    int val;
    int count;

    Node(int v , int c){
        val = v;
        count = c;
    }
  }  

class Test{

public static void main(String args[]){  

			ArrayList<Node> al = new ArrayList<Node>();

			al.add(new Node(11,2));
			al.add(new Node(9,2));
			al.add(new Node(10,2));
			al.add(new Node(9,3));

			/// Here we have made comparion based on more 
			///	than one variable

			al.sort((Node n1,Node n2)->{

					if(n1.val==n2.val){
						return n2.count-n1.count;
					}
					return n1.val-n2.val;
			
			});

			al.forEach(p->System.out.println(p.val + " " +p.count));

 }  
}  

output : 
9 3
9 2
10 2
11 2


*************************************************
*                                               *
*  3. Overriding equals and hashcode method     *
*                                               *
*************************************************

//// This is how to make a custom set
///  For entries of type Object like Student

import java.util.*;
import java.io.*;

class Student{

	int age;
	String name;

	Student(int age , String name){
		this.name=name;
		this.age=age;
	}

	public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;

    Student s = (Student) obj;
    
    if (this.age != s.age)
        return false;
    if (this.name.compareTo(s.name)!=0)
        return false;
    return true;
}


	public int hashCode(){
		return Objects.hash(age,name);
	}
}

class Test{

public static void main(String args[]){  
		
		HashSet<Student> hs = new HashSet<Student>();

		Student s1 = new Student(1,"ramu");
		Student s2 = new Student(2,"sita");
		Student s3 = new Student(3,"ramu");

		hs.forEach((Student p)->System.out.println(p.age + "  " + p.name + p.hashCode()));
 }  
} 




*********************************
*                               *
*  4.  Custom Priority Queue    *
*                               *
*********************************

    PriorityQueue<Node> p  = new PriorityQueue<Node>(new Comparator<Node>(){
                        
          public int compare(Node n1,Node n2){
                return n2.count-n1.count;
                  }
          });



*********************************
*                               *
*     Other handy Syntax        *
*                               *
*********************************

1. String to char Array
		
		String s = "HelloWorld";
		char[] ch = s.toCharArray();

2. Back to string (char Array to string)
		
		String k = new String(ch);

3. 			
       String s = "hell.tea.kit.ll";

       String[] arr = s.split("\\.");

       for(int i=0;i<arr.length;i++){

        System.out.println(arr[i]);
       }
	

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


1.Counting bit in an Integer number

  int bitcount = Integer.bitCount(num);

2. Using Comparable(compareTo) and Comparator(compare)

Ascii value range

  
Actual value Ascii value
0-9  48-57
A-Z 65-90
a-z 97-122


4. Getting ascii value
  
  char p = 'A';
  int ascii = p;

           or

  int ascii = (int)ch;

5. Getting actual value from ascii value

      int num = 67;
  	  char ascii =(char)num; 

6. Convert String of number to integer

    String s = "1234";
    int ee = Integer.parseInt(s);
    System.out.println(ee);
    
7. Integer.toBinaryString(int n)
  
    Returns string of binary representation of number n

8.String split : Below is example based on white spaces

  String org = "Today is beautiful day";
    String[] sp = org.split(" "); 
    for(String a:sp)
      System.out.println(a);

9.BufferedReader/Writer instead of Scanner makes I/O  fast.

10. BigInteger as bignum class.

PriorityQueue for multi-field sorting problems and algorithms.


http://www.practice.geeksforgeeks.org/problem-page.php?pid=1304
Minimize string value


11. For sorting arryas
  
Arrays.sort(al);              // in java.util package
Collections.sort();     



Interview questions:

Q How java Handles divide by zero :


Collections.sort(al.subList(i,a.size()));

  Arrays.sort(bArr, 1, 4);   4 exclusive


14 Integer.MIN_VALUE
15 Intgere.MAX_VALUE
16 Math.max(a,b)
17 Math.min(a,b)
18 Math.abs(num)
19 String.valueOf(num)
20 s.contains(s2)
21 s.indexOf(s2)
22 Character.toString(char)


*** Lambda Expressions

al.sort((Student s1,Student s2)->s1.age-s2.age);
al.sort((Student s1,Student s2)->s1.name.compareTo(s2));

al.forEach( stud -> System.out.println(stud.name + " " + stud.age) );

Map
=====

hm.forEach((k,v)->System.out.println(k,v));
hm.forEach((k,v)->{Staements});

PriorityQueue<> pq = new PriorityQueue((x,y)->y-x);


Collections.reverse()

